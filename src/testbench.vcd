$date
	Mon Mar 26 12:07:39 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 1 ! PCSrc_D $end
$var wire 5 " writeReg_W [4:0] $end
$var wire 5 # writeReg_M [4:0] $end
$var wire 5 $ writeReg_E [4:0] $end
$var wire 32 % writeData_M [31:0] $end
$var wire 32 & v0 [31:0] $end
$var wire 1 ' sysstall $end
$var wire 1 ( syscall_control $end
$var wire 1 ) stat_control $end
$var wire 32 * signImm_E [31:0] $end
$var wire 32 + signImm_D [31:0] $end
$var wire 32 , readData_W [31:0] $end
$var wire 32 - readData_M [31:0] $end
$var wire 32 . ra [31:0] $end
$var wire 32 / number_instructions [31:0] $end
$var wire 32 0 jumpAddr [31:0] $end
$var wire 1 1 jump $end
$var wire 1 2 jr_control $end
$var wire 32 3 jrMux_out [31:0] $end
$var wire 1 4 jal_control $end
$var wire 32 5 instr_F [31:0] $end
$var wire 32 6 instr_D [31:0] $end
$var wire 32 7 branch_mux_out [31:0] $end
$var wire 32 8 a0 [31:0] $end
$var wire 32 9 WriteData_E [31:0] $end
$var wire 2 : WB_W [1:0] $end
$var wire 2 ; WB_M [1:0] $end
$var wire 2 < WB_E [1:0] $end
$var wire 2 = WB_D [1:0] $end
$var wire 1 > StallF $end
$var wire 1 ? StallD $end
$var wire 32 @ SrcBE [31:0] $end
$var wire 32 A SrcAE [31:0] $end
$var wire 5 B Rt_E [4:0] $end
$var wire 5 C Rs_E [4:0] $end
$var wire 32 D Result_W [31:0] $end
$var wire 5 E Rd_E [4:0] $end
$var wire 32 F RD2_E [31:0] $end
$var wire 32 G RD2_D [31:0] $end
$var wire 32 H RD1_E [31:0] $end
$var wire 32 I RD1_D [31:0] $end
$var wire 32 J PC_F [31:0] $end
$var wire 32 K PC_D [31:0] $end
$var wire 32 L PCPlus4_F [31:0] $end
$var wire 32 M PCPlus4_D [31:0] $end
$var wire 32 N PCBranch_D [31:0] $end
$var wire 32 O Next_PC [31:0] $end
$var wire 2 P MEM_M [1:0] $end
$var wire 2 Q MEM_E [1:0] $end
$var wire 2 R MEM_D [1:0] $end
$var wire 2 S ForwardBE [1:0] $end
$var wire 1 T ForwardBD $end
$var wire 2 U ForwardAE [1:0] $end
$var wire 1 V ForwardAD $end
$var wire 1 W FlushE $end
$var wire 1 X EqualD $end
$var wire 5 Y EX_E [4:0] $end
$var wire 5 Z EX_D [4:0] $end
$var wire 1 [ BranchD $end
$var wire 32 \ And_Input2 [31:0] $end
$var wire 32 ] And_Input1 [31:0] $end
$var wire 32 ^ ALUOut_W [31:0] $end
$var wire 32 _ ALUOut_M [31:0] $end
$var wire 32 ` ALUOut_E [31:0] $end
$var reg 1 a clk $end
$scope module ALU_block $end
$var wire 3 b ALUop [2:0] $end
$var wire 32 c reg2 [31:0] $end
$var wire 32 d reg1 [31:0] $end
$var reg 32 e ALUresult [31:0] $end
$upscope $end
$scope module ExMem $end
$var wire 32 f ALUOut_E [31:0] $end
$var wire 1 g FlushE $end
$var wire 1 a clk $end
$var wire 5 h WriteReg_E [4:0] $end
$var wire 32 i WriteData_E [31:0] $end
$var wire 2 j WB_E [1:0] $end
$var wire 2 k MEM_E [1:0] $end
$var reg 32 l ALUOut_M [31:0] $end
$var reg 2 m MEM_M [1:0] $end
$var reg 2 n WB_M [1:0] $end
$var reg 32 o WriteData_M [31:0] $end
$var reg 5 p WriteReg_M [4:0] $end
$upscope $end
$scope module IdEx $end
$var wire 5 q Rd_D [4:0] $end
$var wire 5 r Rs_D [4:0] $end
$var wire 5 s Rt_D [4:0] $end
$var wire 1 a clk $end
$var wire 2 t WB_D [1:0] $end
$var wire 32 u SignImm_D [31:0] $end
$var wire 32 v RD2_D [31:0] $end
$var wire 32 w RD1_D [31:0] $end
$var wire 2 x MEM_D [1:0] $end
$var wire 1 W FlushE $end
$var wire 5 y EX_D [4:0] $end
$var reg 5 z EX_E [4:0] $end
$var reg 2 { MEM_E [1:0] $end
$var reg 32 | RD1_E [31:0] $end
$var reg 32 } RD2_E [31:0] $end
$var reg 5 ~ Rd_E [4:0] $end
$var reg 5 !" Rs_E [4:0] $end
$var reg 5 "" Rt_E [4:0] $end
$var reg 32 #" SignImm_E [31:0] $end
$var reg 2 $" WB_E [1:0] $end
$upscope $end
$scope module IfId $end
$var wire 1 ! PCSrcD $end
$var wire 1 a clk $end
$var wire 1 ? StallD $end
$var wire 32 %" PC_Plus4_F [31:0] $end
$var wire 32 &" PC_F [31:0] $end
$var wire 32 '" Instr_F [31:0] $end
$var reg 32 (" Instr_D [31:0] $end
$var reg 32 )" PC_D [31:0] $end
$var reg 32 *" PC_Plus4_D [31:0] $end
$upscope $end
$scope module JumpAddr_block $end
$var wire 32 +" PCplus4 [31:0] $end
$var wire 32 ," instr [31:0] $end
$var wire 32 -" jumpAddr [31:0] $end
$upscope $end
$scope module MemWb $end
$var wire 32 ." ALUOut_M [31:0] $end
$var wire 2 /" WB_M [1:0] $end
$var wire 5 0" WriteReg_M [4:0] $end
$var wire 1 a clk $end
$var wire 32 1" ReadData_M [31:0] $end
$var reg 32 2" ALUOut_W [31:0] $end
$var reg 32 3" ReadData_W [31:0] $end
$var reg 2 4" WB_W [1:0] $end
$var reg 5 5" WriteReg_W [4:0] $end
$upscope $end
$scope module MuxRD1 $end
$var wire 32 6" mux_in_1 [31:0] $end
$var wire 1 V select $end
$var wire 32 7" mux_in_0 [31:0] $end
$var reg 32 8" mux_out [31:0] $end
$upscope $end
$scope module MuxRD2 $end
$var wire 32 9" mux_in_1 [31:0] $end
$var wire 1 T select $end
$var wire 32 :" mux_in_0 [31:0] $end
$var reg 32 ;" mux_out [31:0] $end
$upscope $end
$scope module PC_block $end
$var wire 1 a clk $end
$var wire 32 <" nextPC [31:0] $end
$var wire 1 > StallF $end
$var reg 32 =" currPC [31:0] $end
$upscope $end
$scope module PCadd4 $end
$var wire 32 >" currPC [31:0] $end
$var wire 32 ?" PCplus4 [31:0] $end
$upscope $end
$scope module aluMux $end
$var wire 32 @" mux_in_1 [31:0] $end
$var wire 1 A" select $end
$var wire 32 B" mux_in_0 [31:0] $end
$var reg 32 C" mux_out [31:0] $end
$upscope $end
$scope module aluSrcAMux $end
$var wire 32 D" mux_in_0 [31:0] $end
$var wire 32 E" mux_in_2 [31:0] $end
$var wire 2 F" select [1:0] $end
$var wire 32 G" mux_in_1 [31:0] $end
$var reg 32 H" mux_out [31:0] $end
$upscope $end
$scope module aluSrcBMux $end
$var wire 32 I" mux_in_0 [31:0] $end
$var wire 32 J" mux_in_2 [31:0] $end
$var wire 2 K" select [1:0] $end
$var wire 32 L" mux_in_1 [31:0] $end
$var reg 32 M" mux_out [31:0] $end
$upscope $end
$scope module branchAdder $end
$var wire 32 N" PC_Plus4 [31:0] $end
$var wire 32 O" signExtendedImmediate [31:0] $end
$var reg 32 P" out [31:0] $end
$upscope $end
$scope module branchMux $end
$var wire 32 Q" mux_in_1 [31:0] $end
$var wire 1 ! select $end
$var wire 32 R" mux_in_0 [31:0] $end
$var reg 32 S" mux_out [31:0] $end
$upscope $end
$scope module branch_control $end
$var wire 1 X zero $end
$var wire 1 [ branch $end
$var reg 1 T" and_out $end
$upscope $end
$scope module control_block $end
$var wire 32 U" instr [31:0] $end
$var reg 3 V" ALUop [2:0] $end
$var reg 1 W" ALUsrc $end
$var reg 1 [ Branch $end
$var reg 5 X" EX_D [4:0] $end
$var reg 1 1 Jump $end
$var reg 2 Y" MEM_D [1:0] $end
$var reg 1 Z" MemRead $end
$var reg 1 [" MemToReg $end
$var reg 1 \" MemWrite $end
$var reg 1 ]" RegDst $end
$var reg 1 ^" RegWrite $end
$var reg 2 _" WB_D [1:0] $end
$var reg 1 4 jal_control $end
$var reg 1 2 jr_control $end
$var reg 1 ( syscall_control $end
$upscope $end
$scope module dataMem $end
$var wire 32 `" SyscallRead [31:0] $end
$var wire 32 a" address [31:0] $end
$var wire 1 a clk $end
$var wire 1 b" memRead $end
$var wire 1 c" memWrite $end
$var wire 32 d" writeData [31:0] $end
$var reg 32 e" readData [31:0] $end
$upscope $end
$scope module hazard $end
$var wire 1 [ BranchD $end
$var wire 1 f" MemReadE $end
$var wire 1 g" MemReadM $end
$var wire 1 h" MemtoRegE $end
$var wire 1 i" MemtoRegM $end
$var wire 1 j" RegWriteE $end
$var wire 1 k" RegWriteM $end
$var wire 1 l" RegWriteW $end
$var wire 5 m" RsD [4:0] $end
$var wire 5 n" RsE [4:0] $end
$var wire 5 o" RtD [4:0] $end
$var wire 5 p" RtE [4:0] $end
$var wire 5 q" WriteRegM [4:0] $end
$var wire 5 r" WriteRegW [4:0] $end
$var wire 1 ( sycall_control $end
$var wire 5 s" WriteRegE [4:0] $end
$var reg 1 W FlushE $end
$var reg 1 V ForwardAD $end
$var reg 2 t" ForwardAE [1:0] $end
$var reg 1 T ForwardBD $end
$var reg 2 u" ForwardBE [1:0] $end
$var reg 1 ? StallD $end
$var reg 1 > StallF $end
$var reg 1 v" branchstall $end
$var reg 1 w" lwstall $end
$var reg 1 ' sysstall $end
$upscope $end
$scope module instructionMemory $end
$var wire 32 x" currPC [31:0] $end
$var reg 32 y" instr [31:0] $end
$var reg 32 z" number_instructions [31:0] $end
$upscope $end
$scope module jrMux $end
$var wire 32 {" mux_in_0 [31:0] $end
$var wire 1 2 select $end
$var wire 32 |" mux_in_1 [31:0] $end
$var reg 32 }" mux_out [31:0] $end
$upscope $end
$scope module jumpMux $end
$var wire 32 ~" mux_in_0 [31:0] $end
$var wire 32 !# mux_in_1 [31:0] $end
$var wire 1 1 select $end
$var reg 32 "# mux_out [31:0] $end
$upscope $end
$scope module memToRegMux $end
$var wire 32 ## mux_in_0 [31:0] $end
$var wire 32 $# mux_in_1 [31:0] $end
$var wire 1 %# select $end
$var reg 32 &# mux_out [31:0] $end
$upscope $end
$scope module regEqual $end
$var wire 32 '# input1 [31:0] $end
$var wire 32 (# input2 [31:0] $end
$var reg 1 X equalD $end
$upscope $end
$scope module reg_block $end
$var wire 1 )# RegWrite $end
$var wire 32 *# a0 [31:0] $end
$var wire 1 a clk $end
$var wire 32 +# jal_address [31:0] $end
$var wire 1 4 jal_control $end
$var wire 32 ,# ra [31:0] $end
$var wire 5 -# readReg1 [4:0] $end
$var wire 5 .# readReg2 [4:0] $end
$var wire 32 /# v0 [31:0] $end
$var wire 32 0# writeData [31:0] $end
$var wire 5 1# writeReg [4:0] $end
$var reg 32 2# readData1 [31:0] $end
$var reg 32 3# readData2 [31:0] $end
$var integer 32 4# i [31:0] $end
$upscope $end
$scope module registerMux $end
$var wire 5 5# mux_in_0 [4:0] $end
$var wire 5 6# mux_in_1 [4:0] $end
$var wire 1 7# select $end
$var reg 5 8# mux_out [4:0] $end
$upscope $end
$scope module runStats $end
$var wire 1 a clk $end
$var wire 32 9# number_instructions [31:0] $end
$var wire 1 ) stat_control $end
$var reg 32 :# number_cycles [31:0] $end
$upscope $end
$scope module signExtend_block $end
$var wire 32 ;# instr [31:0] $end
$var reg 32 <# out_value [31:0] $end
$upscope $end
$scope module testSyscall $end
$var wire 32 =# a0 [31:0] $end
$var wire 1 ( syscall_control $end
$var wire 1 ' sysstall $end
$var wire 32 ># v0 [31:0] $end
$var reg 1 ) stat_control $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 >#
b0 =#
b1 <#
b100100000010000000000000000001 ;#
b1 :#
b1 9#
bx 8#
07#
bx 6#
bx 5#
b100000 4#
b0 3#
b0 2#
bx 1#
bx 0#
b0 /#
b1000 .#
b0 -#
b0 ,#
b10000000000000000101000 +#
b0 *#
1)#
bx (#
b0 '#
bx &#
x%#
bx $#
bx ##
b10000000000000000100100 "#
b1000000000000000000100 !#
b10000000000000000100100 ~"
b10000000000000000100100 }"
b0 |"
b10000000000000000100100 {"
b1 z"
b100100000010000000000000000001 y"
b10000000000000000100000 x"
0w"
0v"
b0 u"
b0 t"
bx s"
bx r"
bx q"
bx p"
b1000 o"
bx n"
b0 m"
xl"
xk"
0j"
xi"
0h"
xg"
0f"
bx e"
b0 d"
xc"
xb"
bx a"
bz `"
b10 _"
1^"
0]"
0\"
0["
0Z"
b0 Y"
b1010 X"
1W"
b10 V"
b100100000010000000000000000001 U"
0T"
b10000000000000000100100 S"
b10000000000000000100100 R"
b10000000000000000101000 Q"
b10000000000000000101000 P"
b1 O"
b10000000000000000100100 N"
bx M"
bx L"
b0 K"
bx J"
bx I"
bx H"
bx G"
b0 F"
bx E"
bx D"
bx C"
bx B"
0A"
bx @"
b10000000000000000100100 ?"
b10000000000000000100000 >"
b10000000000000000100000 ="
b10000000000000000100100 <"
bx ;"
b0 :"
bx 9"
b0 8"
b0 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
b1000000000000000000100 -"
b100100000010000000000000000001 ,"
b10000000000000000100100 +"
b10000000000000000100100 *"
b10000000000000000100000 )"
b100100000010000000000000000001 ("
b100100000010000000000000000001 '"
b10000000000000000100000 &"
b10000000000000000100100 %"
b0 $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
b0 {
b0 z
b1010 y
b0 x
b0 w
b0 v
b1 u
b10 t
b1000 s
b0 r
b0 q
bx p
b0 o
bx n
bx m
bx l
b0 k
b0 j
bx i
bx h
zg
bx f
bx e
bx d
bx c
b0 b
1a
bx `
bx _
bx ^
b0 ]
bx \
0[
b1010 Z
b0 Y
0X
0W
0V
b0 U
xT
b0 S
b0 R
b0 Q
bx P
b10000000000000000100100 O
b10000000000000000101000 N
b10000000000000000100100 M
b10000000000000000100100 L
b10000000000000000100000 K
b10000000000000000100000 J
b0 I
bx H
b0 G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
0?
0>
b10 =
b0 <
bx ;
bx :
bx 9
b0 8
b10000000000000000100100 7
b100100000010000000000000000001 6
b100100000010000000000000000001 5
04
b10000000000000000100100 3
02
01
b1000000000000000000100 0
b1 /
b0 .
bx -
bx ,
b1 +
bx *
0)
0(
0'
b0 &
b0 %
bx $
bx #
bx "
0!
$end
#10
0a
#20
1X
b0 \
b0 ;"
b0 (#
0T
b1 `
b1 e
b1 f
0k"
0i"
0b"
0c"
0g"
b1 @
b1 c
b1 C"
b0 9
b0 i
b0 B"
b0 M"
b0 A
b0 d
b0 H"
b1000 $
b1000 h
b1000 s"
b1000 8#
1j"
b10 b
1A"
b10000000000000000101100 N
b10000000000000000101100 P"
b10000000000000000101100 Q"
b0 ;
b0 n
b0 /"
b0 P
b0 m
b1 *
b1 #"
b1 @"
b0 F
b0 }
b0 I"
b0 H
b0 |
b0 D"
b0 E
b0 ~
b0 6#
b1000 B
b1000 ""
b1000 p"
b1000 5#
b0 C
b0 !"
b0 n"
b10 <
b10 j
b10 $"
b1010 Y
b1010 z
b10000000000000000101000 M
b10000000000000000101000 *"
b10000000000000000101000 +"
b10000000000000000101000 N"
b10000000000000000101100 +#
b10000000000000000100100 K
b10000000000000000100100 )"
b10000000000000000101000 O
b10000000000000000101000 <"
b10000000000000000101000 "#
b10000000000000000101000 7
b10000000000000000101000 S"
b10000000000000000101000 ~"
b10000000000000000101000 3
b10000000000000000101000 R"
b10000000000000000101000 }"
b10 /
b10 z"
b10 9#
b100100000010010000000000000010 5
b100100000010010000000000000010 '"
b100100000010010000000000000010 y"
b10 :#
b10000000000000000101000 L
b10000000000000000101000 %"
b10000000000000000101000 ?"
b10000000000000000101000 {"
b10000000000000000100100 J
b10000000000000000100100 &"
b10000000000000000100100 ="
b10000000000000000100100 >"
b10000000000000000100100 x"
1a
#30
0a
#40
1X
b1001000000000000001000 0
b1001000000000000001000 -"
b1001000000000000001000 !#
b10000000000000000110000 N
b10000000000000000110000 P"
b10000000000000000110000 Q"
b1 9
b1 i
b1 B"
b1 M"
b0 \
b0 ;"
b0 (#
1W"
1^"
b10 V"
b10 +
b10 u
b10 O"
b10 <#
b1001 s
b1001 .#
b1001 o"
b10 S
b10 K"
b10 u"
0T
1k"
0%#
0l"
b100100000010010000000000000010 6
b100100000010010000000000000010 ("
b100100000010010000000000000010 ,"
b100100000010010000000000000010 U"
b100100000010010000000000000010 ;#
b1000 #
b1000 p
b1000 0"
b1000 q"
b1 _
b1 l
b1 ."
b1 6"
b1 9"
b1 E"
b1 J"
b1 a"
b10 ;
b10 n
b10 /"
b0 :
b0 4"
b10000000000000000101100 O
b10000000000000000101100 <"
b10000000000000000101100 "#
b10000000000000000101100 7
b10000000000000000101100 S"
b10000000000000000101100 ~"
b10000000000000000101100 3
b10000000000000000101100 R"
b10000000000000000101100 }"
b11 /
b11 z"
b11 9#
b100100000000100000000000000001 5
b100100000000100000000000000001 '"
b100100000000100000000000000001 y"
b10000000000000000101100 L
b10000000000000000101100 %"
b10000000000000000101100 ?"
b10000000000000000101100 {"
b10000000000000000101000 J
b10000000000000000101000 &"
b10000000000000000101000 ="
b10000000000000000101000 >"
b10000000000000000101000 x"
b11 :#
1a
#50
0a
#60
b10 `
b10 e
b10 f
b0 9
b0 i
b0 B"
b0 M"
b10000000000000000100 0
b10000000000000000100 -"
b10000000000000000100 !#
b1 D
b1 G"
b1 L"
b1 &#
b1 0#
1l"
b10 @
b10 c
b10 C"
b0 S
b0 K"
b0 u"
b1001 $
b1001 h
b1001 s"
b1001 8#
b10000000000000000110100 N
b10000000000000000110100 P"
b10000000000000000110100 Q"
b1 +
b1 u
b1 O"
b1 <#
1W"
1^"
b10 V"
b10 s
b10 .#
b10 o"
b1000 "
b1000 5"
b1000 r"
b1000 1#
b1 ^
b1 2"
b1 ##
b10 :
b10 4"
b1000 #
b1000 p
b1000 0"
b1000 q"
b10 *
b10 #"
b10 @"
b1001 B
b1001 ""
b1001 p"
b1001 5#
b10000000000000000110000 M
b10000000000000000110000 *"
b10000000000000000110000 +"
b10000000000000000110000 N"
b100100000000100000000000000001 6
b100100000000100000000000000001 ("
b100100000000100000000000000001 ,"
b100100000000100000000000000001 U"
b100100000000100000000000000001 ;#
b10000000000000000110100 +#
b10000000000000000101100 K
b10000000000000000101100 )"
b10000000000000000110000 O
b10000000000000000110000 <"
b10000000000000000110000 "#
b10000000000000000110000 7
b10000000000000000110000 S"
b10000000000000000110000 ~"
b10000000000000000110000 3
b10000000000000000110000 R"
b10000000000000000110000 }"
b100 /
b100 z"
b100 9#
b1001010000010000000100000 5
b1001010000010000000100000 '"
b1001010000010000000100000 y"
b100 :#
b10000000000000000110000 L
b10000000000000000110000 %"
b10000000000000000110000 ?"
b10000000000000000110000 {"
b10000000000000000101100 J
b10000000000000000101100 &"
b10000000000000000101100 ="
b10000000000000000101100 >"
b10000000000000000101100 x"
1a
#70
0a
#80
0X
b1 \
b1 ;"
b1 (#
b10 ]
b10 8"
b10 '#
b101000001000000010000000 0
b101000001000000010000000 -"
b101000001000000010000000 !#
b10000001000000010110000 N
b10000001000000010110000 P"
b10000001000000010110000 Q"
b1 G
b1 v
b1 :"
b1 3#
b1 `
b1 e
b1 f
1V
b10010 Z
b10010 y
b10010 X"
1]"
0W"
1^"
b10 V"
b10000000100000 +
b10000000100000 u
b10000000100000 O"
b10000000100000 <#
b100 q
b1000 s
b1001 r
b1000 .#
b1001 -#
b1000 o"
b1001 m"
b1 @
b1 c
b1 C"
b10 $
b10 h
b10 s"
b10 8#
b1001010000010000000100000 6
b1001010000010000000100000 ("
b1001010000010000000100000 ,"
b1001010000010000000100000 U"
b1001010000010000000100000 ;#
b1 *
b1 #"
b1 @"
b10 B
b10 ""
b10 p"
b10 5#
b1001 #
b1001 p
b1001 0"
b1001 q"
b10 _
b10 l
b10 ."
b10 6"
b10 9"
b10 E"
b10 J"
b10 a"
b10000000000000000110100 O
b10000000000000000110100 <"
b10000000000000000110100 "#
b10000000000000000110100 7
b10000000000000000110100 S"
b10000000000000000110100 ~"
b10000000000000000110100 3
b10000000000000000110100 R"
b10000000000000000110100 }"
b101 /
b101 z"
b101 9#
b1100 5
b1100 '"
b1100 y"
b10000000000000000110100 L
b10000000000000000110100 %"
b10000000000000000110100 ?"
b10000000000000000110100 {"
b10000000000000000110000 J
b10000000000000000110000 &"
b10000000000000000110000 ="
b10000000000000000110000 >"
b10000000000000000110000 x"
b101 :#
1a
#90
0a
#100
1X
b0 \
b0 ;"
b0 (#
b11 `
b11 e
b11 f
b110000 0
b110000 -"
b110000 !#
b0 G
b0 v
b0 :"
b0 3#
b10 D
b10 G"
b10 L"
b10 &#
b10 0#
b0 ]
b0 8"
b0 '#
b10 A
b10 d
b10 H"
b1 9
b1 i
b1 B"
b1 M"
b100 $
b100 h
b100 s"
b100 8#
b1 U
b1 F"
b1 t"
0V
1W
1?
1>
1'
0A"
17#
b10000000000000001101000 N
b10000000000000001101000 P"
b10000000000000001101000 Q"
b1100 +
b1100 u
b1100 O"
b1100 <#
b10000 Z
b10000 y
b10000 X"
1(
1^"
b0 V"
1]"
b0 q
b0 s
b0 r
b0 .#
b0 -#
b0 o"
b0 m"
b1001 "
b1001 5"
b1001 r"
b1001 1#
b10 ^
b10 2"
b10 ##
b10 #
b10 p
b10 0"
b10 q"
b1 _
b1 l
b1 ."
b1 6"
b1 9"
b1 E"
b1 J"
b1 a"
b10000000100000 *
b10000000100000 #"
b10000000100000 @"
b1 F
b1 }
b1 I"
b100 E
b100 ~
b100 6#
b1000 B
b1000 ""
b1000 p"
b1000 5#
b1001 C
b1001 !"
b1001 n"
b10010 Y
b10010 z
b10000000000000000111000 M
b10000000000000000111000 *"
b10000000000000000111000 +"
b10000000000000000111000 N"
b1100 6
b1100 ("
b1100 ,"
b1100 U"
b1100 ;#
b10000000000000000111100 +#
b10000000000000000110100 K
b10000000000000000110100 )"
b10000000000000000111000 O
b10000000000000000111000 <"
b10000000000000000111000 "#
b10000000000000000111000 7
b10000000000000000111000 S"
b10000000000000000111000 ~"
b10000000000000000111000 3
b10000000000000000111000 R"
b10000000000000000111000 }"
b110 /
b110 z"
b110 9#
b100100000000100000000000001010 5
b100100000000100000000000001010 '"
b100100000000100000000000001010 y"
b110 :#
b10000000000000000111000 L
b10000000000000000111000 %"
b10000000000000000111000 ?"
b10000000000000000111000 {"
b10000000000000000110100 J
b10000000000000000110100 &"
b10000000000000000110100 ="
b10000000000000000110100 >"
b10000000000000000110100 x"
1a
#110
0a
#120
b0 `
b0 e
b0 f
b0 @
b0 c
b0 C"
b0 $
b0 h
b0 s"
b0 8#
0j"
b0 b
07#
b0 A
b0 d
b0 H"
b0 9
b0 i
b0 B"
b0 M"
b0 U
b0 F"
b0 t"
b1 D
b1 G"
b1 L"
b1 &#
b1 0#
b0 *
b0 #"
b0 @"
b0 F
b0 }
b0 I"
b0 E
b0 ~
b0 6#
b0 B
b0 ""
b0 p"
b0 5#
b0 C
b0 !"
b0 n"
b0 <
b0 j
b0 $"
b0 Y
b0 z
b100 #
b100 p
b100 0"
b100 q"
b11 _
b11 l
b11 ."
b11 6"
b11 9"
b11 E"
b11 J"
b11 a"
b10 "
b10 5"
b10 r"
b10 1#
b1 ^
b1 2"
b1 ##
b111 :#
1a
#130
b1 &
b1 /#
b1 >#
0a
#140
b11 D
b11 G"
b11 L"
b11 &#
b11 0#
0k"
b100 "
b100 5"
b100 r"
b100 1#
b11 ^
b11 2"
b11 ##
b0 #
b0 p
b0 0"
b0 q"
b0 _
b0 l
b0 ."
b0 6"
b0 9"
b0 E"
b0 J"
b0 a"
b0 ;
b0 n
b0 /"
b1000 :#
1a
#150
b11 8
b11 *#
b11 =#
0a
#160
0W
0?
0>
0'
b0 D
b0 G"
b0 L"
b0 &#
b0 0#
0l"
b0 "
b0 5"
b0 r"
b0 1#
b0 ^
b0 2"
b0 ##
b0 :
b0 4"
b1001 :#
1a
#170
0a
#180
0X
b1 \
b1 ;"
b1 (#
b10000000000000101000 0
b10000000000000101000 -"
b10000000000000101000 !#
b1 G
b1 v
b1 :"
b1 3#
1j"
17#
b10000000000000001100100 N
b10000000000000001100100 P"
b10000000000000001100100 Q"
b1010 Z
b1010 y
b1010 X"
1W"
b10 V"
0(
1^"
0]"
b1010 +
b1010 u
b1010 O"
b1010 <#
b10 s
b10 .#
b10 o"
b1100 *
b1100 #"
b1100 @"
b10 <
b10 j
b10 $"
b10000 Y
b10000 z
b10000000000000000111100 M
b10000000000000000111100 *"
b10000000000000000111100 +"
b10000000000000000111100 N"
b100100000000100000000000001010 6
b100100000000100000000000001010 ("
b100100000000100000000000001010 ,"
b100100000000100000000000001010 U"
b100100000000100000000000001010 ;#
b10000000000000001000000 +#
b10000000000000000111000 K
b10000000000000000111000 )"
b10000000000000000111100 O
b10000000000000000111100 <"
b10000000000000000111100 "#
b10000000000000000111100 7
b10000000000000000111100 S"
b10000000000000000111100 ~"
b10000000000000000111100 3
b10000000000000000111100 R"
b10000000000000000111100 }"
b111 /
b111 z"
b111 9#
b1100 5
b1100 '"
b1100 y"
b1010 :#
b10000000000000000111100 L
b10000000000000000111100 %"
b10000000000000000111100 ?"
b10000000000000000111100 {"
b10000000000000000111000 J
b10000000000000000111000 &"
b10000000000000000111000 ="
b10000000000000000111000 >"
b10000000000000000111000 x"
1a
#190
0a
#200
1X
b0 \
b0 ;"
b0 (#
b110000 0
b110000 -"
b110000 !#
b10000000000000001101100 N
b10000000000000001101100 P"
b10000000000000001101100 Q"
b0 G
b0 v
b0 :"
b0 3#
1W
1?
1>
1'
b1010 `
b1010 e
b1010 f
b1100 +
b1100 u
b1100 O"
b1100 <#
b10000 Z
b10000 y
b10000 X"
1(
1]"
0W"
1^"
b0 V"
b0 s
b0 .#
b0 o"
b1010 @
b1010 c
b1010 C"
b1 9
b1 i
b1 B"
b1 M"
b10 $
b10 h
b10 s"
b10 8#
b10 b
1A"
07#
1k"
b1100 6
b1100 ("
b1100 ,"
b1100 U"
b1100 ;#
b1010 *
b1010 #"
b1010 @"
b1 F
b1 }
b1 I"
b10 B
b10 ""
b10 p"
b10 5#
b1010 Y
b1010 z
b10 ;
b10 n
b10 /"
b10000000000000001000000 O
b10000000000000001000000 <"
b10000000000000001000000 "#
b10000000000000001000000 7
b10000000000000001000000 S"
b10000000000000001000000 ~"
b10000000000000001000000 3
b10000000000000001000000 R"
b10000000000000001000000 }"
b1000 /
b1000 z"
b1000 9#
b0 5
b0 '"
b0 y"
b10000000000000001000000 L
b10000000000000001000000 %"
b10000000000000001000000 ?"
b10000000000000001000000 {"
b10000000000000000111100 J
b10000000000000000111100 &"
b10000000000000000111100 ="
b10000000000000000111100 >"
b10000000000000000111100 x"
b1011 :#
1a
#210
0a
#220
b0 `
b0 e
b0 f
1l"
b0 @
b0 c
b0 C"
b0 9
b0 i
b0 B"
b0 M"
b0 $
b0 h
b0 s"
b0 8#
0j"
b0 b
0A"
b10 :
b10 4"
b10 #
b10 p
b10 0"
b10 q"
b1010 _
b1010 l
b1010 ."
b1010 6"
b1010 9"
b1010 E"
b1010 J"
b1010 a"
b0 *
b0 #"
b0 @"
b0 F
b0 }
b0 I"
b0 B
b0 ""
b0 p"
b0 5#
b0 <
b0 j
b0 $"
b0 Y
b0 z
b1100 :#
1a
#230
0a
#240
0k"
b1010 D
b1010 G"
b1010 L"
b1010 &#
b1010 0#
b0 #
b0 p
b0 0"
b0 q"
b0 _
b0 l
b0 ."
b0 6"
b0 9"
b0 E"
b0 J"
b0 a"
b0 ;
b0 n
b0 /"
b10 "
b10 5"
b10 r"
b10 1#
b1010 ^
b1010 2"
b1010 ##
b1101 :#
1a
#250
b1010 &
b1010 /#
b1010 >#
0a
#260
1)
0W
0?
0>
0'
b0 D
b0 G"
b0 L"
b0 &#
b0 0#
0l"
b0 "
b0 5"
b0 r"
b0 1#
b0 ^
b0 2"
b0 ##
b0 :
b0 4"
b1110 :#
1a
#261
